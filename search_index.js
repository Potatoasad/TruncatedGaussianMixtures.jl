var documenterSearchIndex = {"docs":
[{"location":"abstract_transformation/#Transformations-in-TGMM-Fitting","page":"Transformations in TGMM Fitting","title":"Transformations in TGMM Fitting","text":"","category":"section"},{"location":"abstract_transformation/","page":"Transformations in TGMM Fitting","title":"Transformations in TGMM Fitting","text":"This section describes how to use transformations to modify data in a way that aids in fitting Truncated Gaussian Mixture Models (TGMM) by changing the coordinate system.","category":"page"},{"location":"abstract_transformation/#AbstractTransformation","page":"Transformations in TGMM Fitting","title":"AbstractTransformation","text":"","category":"section"},{"location":"abstract_transformation/","page":"Transformations in TGMM Fitting","title":"Transformations in TGMM Fitting","text":"AbstractTransformation is an abstract type that provides a blueprint for creating coordinate transformations on DataFrames. Transformations can modify how data is projected, helping to improve TGMM fitting performance by enabling users to operate in different coordinate systems.","category":"page"},{"location":"abstract_transformation/#Transformation-Struct","page":"Transformations in TGMM Fitting","title":"Transformation Struct","text":"","category":"section"},{"location":"abstract_transformation/","page":"Transformations in TGMM Fitting","title":"Transformations in TGMM Fitting","text":"Transformation is a concrete type implementing AbstractTransformation, allowing users to define custom transformations. Users can specify which columns represent the domain and image spaces and define functions for the forward and inverse transformations.","category":"page"},{"location":"abstract_transformation/#Fields","page":"Transformations in TGMM Fitting","title":"Fields","text":"","category":"section"},{"location":"abstract_transformation/","page":"Transformations in TGMM Fitting","title":"Transformations in TGMM Fitting","text":"domain_columns: Columns representing the domain of the transformation. forward: The transformation function from domain to image. image_columns: Columns in the transformed space. inverse: The inverse transformation function. ignore_columns: Columns that remain unchanged during transformations.","category":"page"},{"location":"abstract_transformation/#Example-Usage","page":"Transformations in TGMM Fitting","title":"Example Usage","text":"","category":"section"},{"location":"abstract_transformation/","page":"Transformations in TGMM Fitting","title":"Transformations in TGMM Fitting","text":"using DataFrames\n\ndf_cartesian = DataFrame(:x => [1.0, 3.0], :y => [0.0, 1.0], :label => [:cat, :dog])\n\n# Define a Cartesian-to-Polar transformation\nCartesianToPolar = Transformation(\n    [:x, :y],\n    (x, y) -> (√(x^2 + y^2), atan2(y, x)),\n    [:r, :θ],\n    (r, θ) -> (r * cos(θ), r * sin(θ)),\n    [:label]\n)\n\n# Apply forward transformation\ndf_polar = forward(CartesianToPolar, df_cartesian)\n\n# Apply inverse transformation\ndf_cartesian_reconstructed = inverse(CartesianToPolar, df_polar)","category":"page"},{"location":"abstract_transformation/#Misc-Documentation","page":"Transformations in TGMM Fitting","title":"Misc Documentation","text":"","category":"section"},{"location":"abstract_transformation/","page":"Transformations in TGMM Fitting","title":"Transformations in TGMM Fitting","text":"Modules = [TruncatedGaussianMixtures]\nOrder = [:type, :function]\nPrivate = false","category":"page"},{"location":"abstract_transformation/#TruncatedGaussianMixtures.AbstractTransformation","page":"Transformations in TGMM Fitting","title":"TruncatedGaussianMixtures.AbstractTransformation","text":"An abstract type representing a coordinate transformation.\n\nAbstractTransformation is a supertype for transformations that can be applied to a DataFrame. It requires that any subtype define forward, inverse, domain_columns, and image_columns methods.\n\nRequired methods for subtypes\n\nforward: Defines the forward transformation.\ninverse: Defines the inverse transformation.\ndomain_columns: Lists columns in the DataFrame that belong to the transformation's domain.\nimage_columns: Lists columns representing the transformed space.\n\n\n\n\n\n","category":"type"},{"location":"abstract_transformation/#TruncatedGaussianMixtures.Transformation","page":"Transformations in TGMM Fitting","title":"TruncatedGaussianMixtures.Transformation","text":"A concrete implementation of AbstractTransformation for performing custom transformations on DataFrames.\n\nFields\n\ndomain_columns: A vector of symbols representing the columns in the domain space.\nforward: A function that maps domain columns to image columns.\nimage_columns: A vector of symbols representing the columns in the transformed space.\ninverse: A function that maps image columns back to domain columns.\nignore_columns: A vector of columns to leave unchanged during transformation.\n\nConstructor\n\nTransformation(domain_columns, forward, image_columns, inverse; ignore_columns=[])\n\n\n\n\n\n","category":"type"},{"location":"abstract_transformation/#TruncatedGaussianMixtures.domain_columns-Tuple{AbstractTransformation}","page":"Transformations in TGMM Fitting","title":"TruncatedGaussianMixtures.domain_columns","text":"Return the domain columns of the specified transformation.\n\nArguments\n\nTr::AbstractTransformation: A transformation object.\n\nReturns\n\nA list of symbols corresponding to the domain columns.\n\n\n\n\n\n","category":"method"},{"location":"abstract_transformation/#TruncatedGaussianMixtures.forward-Tuple{AbstractTransformation, DataFrames.DataFrame}","page":"Transformations in TGMM Fitting","title":"TruncatedGaussianMixtures.forward","text":"Apply the forward transformation to a DataFrame.\n\nTransforms columns in the domain space to the image space, keeping other columns unchanged.\n\nArguments\n\nTr::AbstractTransformation: A transformation object.\ndf::DataFrame: A DataFrame containing columns matching the domain.\n\nReturns\n\nA DataFrame with transformed columns in the image space.\n\n\n\n\n\n","category":"method"},{"location":"abstract_transformation/#TruncatedGaussianMixtures.forward-Tuple{AbstractTransformation}","page":"Transformations in TGMM Fitting","title":"TruncatedGaussianMixtures.forward","text":"Return the forward transformation function of the specified transformation.\n\nArguments\n\nTr::AbstractTransformation: A transformation object.\n\nReturns\n\nThe forward transformation function associated with Tr.\n\n\n\n\n\n","category":"method"},{"location":"abstract_transformation/#TruncatedGaussianMixtures.image_columns-Tuple{AbstractTransformation}","page":"Transformations in TGMM Fitting","title":"TruncatedGaussianMixtures.image_columns","text":"Return the image columns of the specified transformation.\n\nArguments\n\nTr::AbstractTransformation: A transformation object.\n\nReturns\n\nA list of symbols corresponding to the columns in the transformed space.\n\n\n\n\n\n","category":"method"},{"location":"abstract_transformation/#TruncatedGaussianMixtures.inverse-Tuple{AbstractTransformation, DataFrames.DataFrame}","page":"Transformations in TGMM Fitting","title":"TruncatedGaussianMixtures.inverse","text":"Apply the inverse transformation to a DataFrame.\n\nTransforms columns in the image space back to the domain space, keeping other columns unchanged.\n\nArguments\n\nTr::AbstractTransformation: A transformation object.\ndf::DataFrame: A DataFrame containing columns in the image space.\n\nReturns\n\nA DataFrame with transformed columns in the domain space.\n\n\n\n\n\n","category":"method"},{"location":"abstract_transformation/#TruncatedGaussianMixtures.inverse-Tuple{AbstractTransformation}","page":"Transformations in TGMM Fitting","title":"TruncatedGaussianMixtures.inverse","text":"Return the inverse transformation function of the specified transformation.\n\nArguments\n\nTr::AbstractTransformation: A transformation object.\n\nReturns\n\nThe inverse transformation function associated with Tr.\n\n\n\n\n\n","category":"method"},{"location":"QuickExample/QuickExample/#Simplest-Example","page":"Simplest Example","title":"Simplest Example","text":"","category":"section"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"Here is the simplest example of trying to fit some data to a mixture of multivariate truncated gaussians. ","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"Let us first generate some example data from some mixture of truncated normals, and then fit to them.  ","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"TruncatedGaussianMixtures exports the TruncatedMvNormal distribution, which can created as shown below using a normal MvNormal distribution from Distributions.jl.","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"using TruncatedGaussianMixtures\nusing DataFrames, Distributions, CairoMakie, PairPlots\n\n# Lets generate some variables\na = [0.0, 0.0]; b = [1.0, 1.0] # Lower and upper limits of the bounding box\n\n# Generate a mixture of truncated gaussian mixtures\nμ1 = [0.2, 0.7]; \nΣ1 = [0.05 0.04;0.04 0.05];\n\nμ2 = [0.1, 0.2]; \nΣ2 = [0.05 -0.02;-0.02 0.03];\n\ndist = MixtureModel(\n    [TruncatedMvNormal(MvNormal(μ1, Σ1), a, b), \n     TruncatedMvNormal(MvNormal(μ2, Σ2), a, b)],\n    [0.3, 0.7]\n)\n\ndf = DataFrame(rand(dist, 80_000)', [:x, :y])\n\npairplot(df => (PairPlots.MarginHist(),PairPlots.Scatter(markersize=4, alpha=0.05), PairPlots.MarginConfidenceLimits()))","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"(Image: alt text)","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"Lets fit this data to a TGMM with two components.  cov can either be ","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":":diag for diagonal covariance matrices, or \nfull for general covariance matrices. ","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"Since we have allowed correlations in the TGMM components above, we will use full.","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"gmm = fit_gmm(df, 2, a, b; cov=:full, tol=1e-5, progress=true);","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"[32mProgress: 100%|█████████████████████████████████████████| Time: 0:00:04","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"The tol keyword sets the stopping criteria of the EM algorithm (one can play with this), and progress will allow one to see a progress bar. ","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"Since the gmm object we output is simply a Distributions.jl object, we can just use rand and generate samples we need from it. ","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"df_fit = DataFrame(rand(gmm, 80_000)', [:x, :y]);","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"Now let us see how well we fit the distribution.","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"pairplot(\n    df => (PairPlots.MarginHist(),PairPlots.Scatter(markersize=4, alpha=0.03), PairPlots.MarginConfidenceLimits()),\n    df_fit => (PairPlots.MarginHist(),PairPlots.Scatter(markersize=4, alpha=0.03), PairPlots.MarginConfidenceLimits())\n)","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"(Image: alt text)","category":"page"},{"location":"QuickExample/QuickExample/","page":"Simplest Example","title":"Simplest Example","text":"Looks good to me!","category":"page"},{"location":"#Truncated-Gaussian-Mixtures","page":"Truncated Gaussian Mixtures","title":"Truncated Gaussian Mixtures","text":"","category":"section"},{"location":"","page":"Truncated Gaussian Mixtures","title":"Truncated Gaussian Mixtures","text":"This package allows one to fit a gaussian mixture model using Truncated Gaussian Kernels. Works only for Gaussians truncated to lie inside some box. ","category":"page"},{"location":"","page":"Truncated Gaussian Mixtures","title":"Truncated Gaussian Mixtures","text":"The algorithm is adapted from this paper by Lee & Scott, as well as the algorithm for computing the first two moments of a truncated gaussian with full covariances. ","category":"page"},{"location":"#Quick-Usage","page":"Truncated Gaussian Mixtures","title":"Quick Usage","text":"","category":"section"},{"location":"","page":"Truncated Gaussian Mixtures","title":"Truncated Gaussian Mixtures","text":"The quickest no-frills way to use TruncatedGaussianMixtures is by using the fit_gmm method by specifying your data as a DataFrame.","category":"page"},{"location":"","page":"Truncated Gaussian Mixtures","title":"Truncated Gaussian Mixtures","text":"using TruncatedGaussianMixtures\nusing DataFrames, Distributions\n\n# Mock Data: Generate a mixture of truncated gaussian mixtures\nμ1 = [0.2, 0.7]; \nΣ1 = [0.05 0.04;0.04 0.05];\n\nμ2 = [0.1, 0.2]; \nΣ2 = [0.05 -0.02;-0.02 0.03];\n\na = [0.0, 0.0]; b = [1.0, 1.0] # Lower and upper limits of the bounding box\n\ndist = MixtureModel(\n    [TruncatedMvNormal(MvNormal(μ1, Σ1), a, b), \n     TruncatedMvNormal(MvNormal(μ2, Σ2), a, b)],\n    [0.3, 0.7]\n)\n\ndf = DataFrame(rand(dist, 80_000)', [:x, :y])\n\n# Lets fit a 2 component Truncated Gaussian Mixture model\n# with general covariance matrices, and also show a progress bar\ngmm = fit_gmm(df, 2, a, b; cov=:full, tol=1e-5, progress=true);","category":"page"},{"location":"#Advantages","page":"Truncated Gaussian Mixtures","title":"Advantages","text":"","category":"section"},{"location":"","page":"Truncated Gaussian Mixtures","title":"Truncated Gaussian Mixtures","text":"As we can see the standard Gaussian Mixture Model has its kernels avoid the edges. A truncated kernel reproduces the probability distributions at the edges as well.","category":"page"},{"location":"","page":"Truncated Gaussian Mixtures","title":"Truncated Gaussian Mixtures","text":"(Image: )","category":"page"},{"location":"","page":"Truncated Gaussian Mixtures","title":"Truncated Gaussian Mixtures","text":"(Image: )","category":"page"},{"location":"#Usage","page":"Truncated Gaussian Mixtures","title":"Usage","text":"","category":"section"},{"location":"","page":"Truncated Gaussian Mixtures","title":"Truncated Gaussian Mixtures","text":"# Create the fit\nEM = fit_gmm(X, 2, a, b;   # data, n_components, lower, upper\n  cov=:diag,  # Choose between :diag and :full for diagonal or full covariances\n  block_structure=[1,1], # Specify the blocks that can be correlated with each other\n                         # [a,a] means that the first and second dimension are in the same block\n                         # Only relavent if one uses cov=:full\n  tol=1e-2,   # tolerance for the stopping criteria.\n  MAX_REPS=100, # Maximum number of EM update steps\n  verbose=false,  # Verbose output usefull for debugging \n  progress=true,  # Gives a progress bar to show the progress of the fit\n  responsibilities=false, # Returns the EM object as opposed to Distributions.jl object\n  block_structure=false) # One can specify a block structure for the covariances","category":"page"}]
}
